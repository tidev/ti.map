---
name: Modules.Map
summary: Add-on Map module
description: |
    ### Requirements

    -   Google Maps API key (required for both development and production)
    -   Google Play services SDK installed using the Android SDK manager
    -   This module only works on Android devices.  This module is not supported on the Android emulator

    ### Getting Started

    -   Edit the `modules` section of your tiapp.xml file to include this module:

        ``` xml
        <ti:app>
            <modules>
                <!-- Add this line to your modules section -->
                <module platform="android">ti.map</module>
            </modules>
        </ti:app>
        ```

    -   Obtain a Google Maps API key.  For instructions, refer to the "Obtain and Add a Google API Key"
        section in the
        [Google Maps v2 for Android guide](http://docs.appcelerator.com/titanium/latest/#!/guide/Google_Maps_v2_for_Android).

    -   Add the following `meta-tag` element to the Android manifest section of the tiapp.xml
        file. You may need to add the `manifest` and `application` elements.
        ``` xml
        <ti:app>
            <android xmlns:android="http://schemas.android.com/apk/res/android">
                <manifest>
                    <application>
                        <!-- Replace "YOUR_API_KEY" with the Google API key you obtained -->
                        <meta-data 
                            android:name="com.google.android.geo.API_KEY"
                            android:value="YOUR_API_KEY" />
                    </application>
                </manifest>
            </android>
        </ti:app>
        ```

    -   Instantiate the module with the `require('ti.map')` method, then make subsequent API calls with
        the new map object.

        ``` javascript
        var Map = require('ti.map');
        var mapview = Map.createView({ 
          mapType: Map.NORMAL_TYPE 
        });
        ```

    ## iOS

    This module is a replacement for the built-in Titanium.Map module on iOS.

    For more instructions and examples of using the module, refer to the
    [iOS Map Kit guide](http://docs.appcelerator.com/titanium/latest/#!/guide/iOS_Map_Kit).

    ### Requirements

    -   Applications using this module must be built using Xcode 5 or later.

    ### Getting Started

    -   Edit the `modules` section of your tiapp.xml file to include this module:

        ``` xml
        <ti:app>
            <modules>
                <!-- Add this line to your modules section -->
                <module platform="iphone">ti.map</module>
            </modules>
        </ti:app>
        ```

    -   To use the `userLocation` property in iOS 8 and later, add either the
        [`NSLocationWhenInUseUsageDescription`](https://developer.apple.com/library/prerelease/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW26)
        or
        [`NSLocationAlwaysUsageDescription`](https://developer.apple.com/library/prerelease/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW18)
        key to the iOS plist section of the project's `tiapp.xml` file.

        ``` xml
        <ti:app>
            <ios>
                <plist>
                    <dict>
                        <key>NSLocationAlwaysUsageDescription</key>
                        <string>
                            Specify the reason for accessing the user's location information.
                            This appears in the alert dialog when asking the user for permission to
                            access their location.
                        </string>
                    </dict>
                </plist>
            </ios>
        </ti:app>
        ```

    -   Instantiate the module with the `require('ti.map')` method, then make subsequent API calls with
        the new map object.

        ``` javascript
        var Map = require('ti.map');
        var mapview = Map.createView({
          mapType: Map.NORMAL_TYPE
        });
        ```

    ### Breaking Changes

    -   The `addRoute` method no longer accepts a dictionary as a parameter. Pass a <Modules.Map.Route> object instead.
extends: Titanium.Module
since: { android: "3.1.0", iphone: "3.2.0", ipad: "3.2.0", macos: "9.2.0" }
platforms: [android, iphone, ipad, macos]
excludes:
    methods: [addEventListener, fireEvent, removeEventListener]
    properties: [bubbleParent]
properties:
  - name: ANNOTATION_DRAG_STATE_START
    summary: |
        Used in the [pinchangedragstate](Modules.Map.View.pinchangedragstate) event
        to indicate that the user started dragging the annotation.
    type: Number
    permission: read-only
    since: "3.1.0"

  - name: ANNOTATION_DRAG_STATE_END
    summary: |
        Used in the [pinchangedragstate](Modules.Map.View.pinchangedragstate) event
        to indicate that the user finished moving the annotation.
    type: Number
    permission: read-only
    since: "3.1.0"

  - name: ANNOTATION_GREEN
    summary: |
        Color constant used to set a map annotation to green via the
        <Modules.Map.Annotation.pincolor> property.
    type: Number
    permission: read-only

  - name: ANNOTATION_BLUE
    summary: |
        Color constant used to set a map annotation to blue via the
        <Modules.Map.Annotation.pincolor> property.
    type: Number
    permission: read-only
    since: {iphone: "6.1.0", ipad: "6.1.0", android: "3.1.0"}
    osver: {ios: {min: "9.0"} }

  - name: ANNOTATION_AZURE
    summary: |
        Color constant used to set a map annotation to azure via the
        <Modules.Map.Annotation.pincolor> property.
    type: Number
    permission: read-only
    since: {iphone: "6.1.0", ipad: "6.1.0", android: "3.1.0", macos: "9.2.0"}
    osver: {ios: {min: "9.0"} }

  - name: ANNOTATION_CYAN
    summary: |
        Color constant used to set a map annotation to cyan via the
        <Modules.Map.Annotation.pincolor> property.
    type: Number
    permission: read-only
    since: {iphone: "6.1.0", ipad: "6.1.0", android: "3.1.0", macos: "9.2.0"}
    osver: {ios: {min: "9.0"} }

  - name: ANNOTATION_MAGENTA
    summary: |
        Color constant used to set a map annotation to magenta via the
        <Modules.Map.Annotation.pincolor> property.
    type: Number
    permission: read-only
    since: {iphone: "6.1.0", ipad: "6.1.0", android: "3.1.0", macos: "9.2.0"}
    osver: {ios: {min: "9.0"} }

  - name: ANNOTATION_ORANGE
    summary: |
        Color constant used to set a map annotation to orange via the
        <Modules.Map.Annotation.pincolor> property.
    type: Number
    permission: read-only
    since: {iphone: "6.1.0", ipad: "6.1.0", android: "3.1.0", macos: "9.2.0"}
    osver: {ios: {min: "9.0"} }

  - name: ANNOTATION_PURPLE
    summary: |
        Color constant used to set a map annotation to purple via the
        <Modules.Map.Annotation.pincolor> property.
    type: Number
    permission: read-only
    since: {iphone: "3.2.0", ipad: "3.2.0", android: "6.1.0", macos: "9.2.0"}

  - name: ANNOTATION_ROSE
    summary: |
        Color constant used to set a map annotation to rose via the
        <Modules.Map.Annotation.pincolor> property.
    type: Number
    permission: read-only
    since: {iphone: "6.1.0", ipad: "6.1.0", android: "3.1.0", macos: "9.2.0"}
    osver: {ios: {min: "9.0"} }

  - name: ANNOTATION_YELLOW
    summary: |
        Color constant used to set a map annotation to yellow via the
        <Modules.Map.Annotation.pincolor> property.
    type: Number
    permission: read-only
    since: {iphone: "6.1.0", ipad: "6.1.0", android: "3.1.0", macos: "9.2.0"}
    osver: {ios: {min: "9.0"} }

  - name: ANNOTATION_VIOLET
    summary: |
        Color constant used to set a map annotation to violet via the
        <Modules.Map.Annotation.pincolor> property.
    type: Number
    permission: read-only
    since: {iphone: "6.1.0", ipad: "6.1.0", android: "3.1.0", macos: "9.2.0"}
    osver: {ios: {min: "9.0"} }

  - name: ANNOTATION_RED
    summary: |
        Color constant used to set a map annotation to red via the
        <Modules.Map.Annotation.pincolor> property.
    type: Number
    permission: read-only

  - name: SATELLITE_TYPE
    summary: Used with [mapType](Modules.Map.View.mapType) to display satellite imagery of the area.
    type: Number
    permission: read-only

  - name: SATELLITE_FLYOVER_TYPE
    summary: Used with [mapType](Modules.Map.View.mapType) to display satellite flyover imagery of the area. Available in iOS 9.0 and later.
    type: Number
    permission: read-only
    exclude-platforms: [android]

  - name: NORMAL_TYPE
    summary: Used with [mapType](Modules.Map.View.mapType) to display a street map that shows the position of all roads and some road names.
    type: Number
    permission: read-only

  - name: TERRAIN_TYPE
    summary: Used with [mapType](Modules.Map.View.mapType) to display the terrain that shows the position of all roads and some road names.
    type: Number
    permission: read-only
    platforms: [android]

  - name: HYBRID_TYPE
    summary: Used with [mapType](Modules.Map.View.mapType) to display a satellite image of the area with road and road name information layered on top.
    type: Number
    permission: read-only

  - name: HYBRID_FLYOVER_TYPE
    summary: Used with [mapType](Modules.Map.View.mapType) to display a satellite flyover image of the area with road and road name information layered on top. Available in iOS 9.0 and later.
    type: Number
    permission: read-only
    exclude-platforms: [android]

  - name: MUTED_STANDARD_TYPE
    summary: |
        Used with [mapType](Modules.Map.View.mapType) to display a street map where your data is emphasized over
        the underlying map details. Available in iOS 11.0 and later. On Android it is mapped to `NORMAL_TYPE`.
    type: Number
    permission: read-only
    osver: {ios: {min: "11.0"} }

  - name: REASON_API_ANIMATION
    summary: Used in the [regionwillchange](Modules.Map.View.regionwillchange) event. The animation was initiated in response to the user actions.
    type: Number
    permission: read-only
    platforms: [android]

  - name: REASON_DEVELOPER_ANIMATION
    summary: Used in the [regionwillchange](Modules.Map.View.regionwillchange) event. The camera moved in response to a request from the application.
    type: Number
    permission: read-only
    platforms: [android]

  - name: REASON_GESTURE
    summary: Used in the [regionwillchange](Modules.Map.View.regionwillchange) event. The camera moved in response to the user gestures on the map.
    type: Number
    permission: read-only
    platforms: [android]

  - name: SUCCESS
    summary: Code returned from <Modules.Map.isGooglePlayServicesAvailable>. Google Play services is available, and the connection is successful.
    type: Number
    permission: read-only
    platforms: [android]

  - name: SERVICE_MISSING
    summary: Code returned from <Modules.Map.isGooglePlayServicesAvailable>. Google Play services is not installed on the device.
    type: Number
    permission: read-only
    platforms: [android]

  - name: SERVICE_VERSION_UPDATE_REQUIRED
    summary: Code returned from <Modules.Map.isGooglePlayServicesAvailable>. Google Play services is out of date.
    type: Number
    permission: read-only
    platforms: [android]

  - name: SERVICE_DISABLED
    summary: Code returned from <Modules.Map.isGooglePlayServicesAvailable>. Google Play services has been disabled on this device.
    type: Number
    permission: read-only
    platforms: [android]

  - name: SERVICE_INVALID
    summary: Code returned from <Modules.Map.isGooglePlayServicesAvailable>. The version of Google Play services installed on this device is not authentic.
    type: Number
    permission: read-only
    platforms: [android]

  - name: OVERLAY_LEVEL_ABOVE_LABELS
    summary: Place the overlay above roadways but below map labels, shields, or point-of-interest icons. Available in iOS 7.0 and later.
    type: Number
    permission: read-only
    since: "3.2.0"
    exclude-platforms: [android]

  - name: OVERLAY_LEVEL_ABOVE_ROADS
    summary: |
        Place the overlay above map labels, shields, or point-of-interest icons but below annotations and 3D projections of buildings.
        Available in iOS 7.0 and later.
    type: Number
    permission: read-only
    since: "3.2.0"
    exclude-platforms: [android]

  - name: POLYLINE_JOINT_BEVEL
    summary: |
        Flat bevel on the outside of the joint.
    type: Number
    permission: read-only
    platforms: [android]
    since: "5.1.0"

  - name: POLYLINE_JOINT_DEFAULT
    summary: |
        Default: Mitered joint, with fixed pointed extrusion equal to half the stroke width on the outside of the joint.
    type: Number
    permission: read-only
    platforms: [android]
    since: "5.1.0"

  - name: POLYLINE_JOINT_ROUND
    summary: |
        Rounded on the outside of the joint by an arc of radius equal to half the stroke width, centered at the vertex.
    type: Number
    permission: read-only
    platforms: [android]
    since: "5.1.0"

  - name: POLYLINE_PATTERN_DASHED
    summary: |
        Polyline type constant used to display a dashed polyline via <Modules.Map.Polyline.pattern> property.
    type: Number
    permission: read-only
    since: "6.2.0"

  - name: POLYLINE_PATTERN_DOTTED
    summary: |
        Polyline type constant used to display a dotted polyline via <Modules.Map.Polyline.pattern> property.
    type: Number
    permission: read-only
    since: "6.2.0"

  - name: FEATURE_VISIBILITY_ADAPTIVE
    summary: Constant indicating that title text adapts to the current map state.
    description: |
        For markers in the normal state, title text is displayed and subtitle text is hidden. When a marker
        is selected, the title and subtitle text are hidden when the marker requires a callout.
    type: Number
    permission: read-only
    osver: {ios: {min: "11.0"} }
    exclude-platforms: [android]
    since: "6.3.0"

  - name: FEATURE_VISIBILITY_HIDDEN
    summary: Constant indicating that title text is always hidden.
    type: Number
    permission: read-only
    osver: {ios: {min: "11.0"} }
    exclude-platforms: [android]
    since: "6.3.0"

  - name: FEATURE_VISIBILITY_VISIBLE
    summary: Constant indicating that title text is always visible.
    type: Number
    permission: read-only
    osver: {ios: {min: "11.0"} }
    exclude-platforms: [android]
    since: "6.3.0"

  - name: FEATURE_DISPLAY_PRIORITY_REQUIRED
    summary: Constant indicating that the item is required.
    description: |
        An annotation view with this priority does not participate in clustering.
    type: Number
    permission: read-only
    osver: {ios: {min: "11.0"} }
    exclude-platforms: [android]
    since: "6.3.0"

  - name: FEATURE_DISPLAY_PRIORITY_DEFAULT_HIGH
    summary: Constant indicating that the item's display priority is high.
    description: |
        An annotation view with this priority is removed from the map when its bounds
        collide with the bounds of another view with a higher priority. If the priorities
        of the two views are equal, the view furthest from the center of the map's visible
        region is hidden first.
    type: Number
    permission: read-only
    osver: {ios: {min: "11.0"} }
    exclude-platforms: [android]
    since: "6.3.0"

  - name: FEATURE_DISPLAY_PRIORITY_DEFAULT_LOW
    summary: Constant indicating that the item's display priority is low.
    description: |
        An annotation view with this priority is removed from the map when its bounds
        collide with the bounds of another view with a higher priority. If the priorities
        of the two views are equal, the view furthest from the center of the map's visible
        region is hidden first.
    type: Number
    permission: read-only
    osver: {ios: {min: "11.0"} }
    exclude-platforms: [android]
    since: "6.3.0"

  - name: ANNOTATION_VIEW_COLLISION_MODE_RECTANGLE
    summary: |
        Constant indicating that the full collision frame rectangle should be used for
        detecting collisions.
    type: Number
    permission: read-only
    osver: {ios: {min: "11.0"} }
    platforms: [iphone, ipad]
    since: "6.3.0"

  - name: ANNOTATION_VIEW_COLLISION_MODE_CIRCLE
    summary: |
        Constant indicating that a circle inscribed in the collision frame rectangle should
        be used to determine collisions.
    type: Number
    permission: read-only
    osver: {ios: {min: "11.0"} }
    exclude-platforms: [android]
    since: "6.3.0"

methods:
  - name: isGooglePlayServicesAvailable
    returns:
        type: Number
        summary: |
            One of the following status codes:
            <Modules.Map.SUCCESS>, <Modules.Map.SERVICE_MISSING>,
            <Modules.Map.SERVICE_VERSION_UPDATE_REQUIRED>,
            <Modules.Map.SERVICE_DISABLED> or <Modules.Map.SERVICE_INVALID>.
    summary: Returns a code to indicate whether Google Play Services is available on the device.
    since: "3.1.1"
    platforms: [android]

examples:

  - title: Basic Map Example
    example: |
        This is a basic map example that places a custom annotation on the map, and
        listens for click events on the annotation.

        In this example, a custom property (`myid`) is added to the annotation object.
        While adding custom members to a Titanium object is not generally recommended,
        in this case it provides a mechanism for uniquely identifying an annotation. This
        can be useful, for example, if the annotations are dynamically generated
        and it is not practical to identify them by title.

        ``` javascript
        var Map = require('ti.map');
        var win = Titanium.UI.createWindow();

        var mountainView = Map.createAnnotation({
            latitude: 37.390749,
            longitude: -122.081651,
            title: 'Appcelerator Headquarters',
            subtitle: 'Mountain View, CA',
            pincolor: Map.ANNOTATION_RED,
            myid: 1 // Custom property to uniquely identify this annotation.
        });

        var mapview = Map.createView({
            mapType: Map.NORMAL_TYPE,
            region: { 
                latitude: 33.74511,
                longitude: -84.38993,
                latitudeDelta: 0.01,
                longitudeDelta: 0.01
            },
            animate: true,
            regionFit: true,
            userLocation: true,
            annotations: [ mountainView ]
        });

        var circle = Map.createCircle({
            center: {
                latitude: 33.74511,
                longitude: -84.38993
            },
            radius: 1000, // = 1.0 km
            fillColor: '#20FF0000'
        });
        mapview.addCircle(circle);

        win.add(mapview);

        mapview.addEventListener('click', function(event) {
            Ti.API.info('Clicked ' + event.clicksource + ' on ' + event.latitude + ', ' + event.longitude);
        });
        win.open();
        ```
  - title: Alloy XML Markup
    example: |
        Previous example as an Alloy view.

        In XML markup, use the `View` element with the `module` attribute set to `ti.map` to create an
        instance of a map view, then use the `Annotation` element to define an annotation.

        In the initializer file, load the map module and assign it to the `Alloy.Globals.Map` namespace.
        This variable can be used to reference map module constants in the project, as seen in the TSS
        file to assign the `pincolor` attribute.

        `alloy.js`:

        ``` javascript
        // Loads the map module to the global Alloy scope, which can be referenced by Alloy.Globals.Map
        Alloy.Globals.Map = require('ti.map');
        ```

        `app/views/index.xml`:

        ``` xml
        <Alloy>
            <Window>
                <Module id="mapview" module="ti.map" onClick="report" method="createView">
                    <Annotation id="appcHQ" myId="1337" />
                </Module>
            </Window>
        </Alloy>
        ```

        `app/styles/index.tss`:

        ``` javascript
        "#mapview": {
            region: {
                latitude: 33.74511,
                longitude: -84.38993,
                latitudeDelta: 0.01,
                longitudeDelta: 0.01
            }
        },
        "#appcHQ": {
            latitude: 37.368122,
            longitude: -121.913653,
            title: "Appcelerator Headquarters",
            subtitle: "San Jose, CA",
            pincolor: Alloy.Globals.Map.ANNOTATION_RED
        }
        ```

        `app/controllers/index.js`:

        ``` javascript
        function report(event) {
            Ti.API.info('Annotation ' + event.title + ' clicked, ID: ' + event.annotation.myID);
        }

        $.index.open();
        ```
  - title: Map Clustering (iOS 11+)
    example: |
        This is a map-example which creates marker annotation and clustering of annotations.

        The `clusterIdentifier` property and the `clusterstart` event are required in order to enable
        clustering. You can control the clustering by defining the `collisionMode` property and
        setting special cluster annotations using the `setClusterAnnotation` method on your map
        view instance.

        ``` javascript
        var Map = require('ti.map');
        var win = Titanium.UI.createWindow();
        var annotations = [];

        for (var i = 0; i < 10; i++) {
            annotations.push(Map.createAnnotation({
                title: 'Appcelerator Inc.',
                subtitle: 'TiRocks!',
                clusterIdentifier: 'abc', // Required for clusters
                collisionMode: Map.ANNOTATION_VIEW_COLLISION_MODE_RECTANGLE,
                showAsMarker: true,
                markerGlyphText: i.toString(),
                markerColor: 'blue',
                markerGlyphColor: 'green',
                markerTitleVisibility: Map.FEATURE_VISIBILITY_VISIBLE,
                markerSubtitleVisibility: Map.FEATURE_VISIBILITY_HIDDEN,
                markerGlyphImage: 'path/to/flag.png',
                markerSelectedGlyphImage: 'path/to/flag-selected.png',
                annotationDisplayPriority: Map.FEATURE_DISPLAY_PRIORITY_DEFAULT_LOW,
                latitude: (Math.random() * 10) + 40,
                longitude: Math.random() * 10,
            }));
        }

        var mapview = Map.createView({
            annotations: annotations,
            rotateEnabled: true,
            mapType: Map.MUTED_STANDARD_TYPE,
            showsPointsOfInterest: false,
            userLocation: true
        });

        mapview.addEventListener('clusterstart', function(e) {
            Ti.API.info('clustering started!');

            var clusterAnnotation = Map.createAnnotation({
                showAsMarker: true,
                markerText: e.memberAnnotations.length.toString(),
                title: 'Cluster Title',
                subtitle: 'Cluster Subtitle',
            });

            mapview.setClusterAnnotation({
                annotation: clusterAnnotation,
                memberAnnotations: e.memberAnnotations
            });
        });
        win.add(mapview);
        win.open();
        ```

---
name: MapPointType
summary: An object representing a point on the map.
properties:
  - name: longitude
    summary: Longitude value of the map point, in decimal degrees.
    type: Number

  - name: latitude
    summary: Latitude value of the map point, in decimal degrees.
    type: Number
